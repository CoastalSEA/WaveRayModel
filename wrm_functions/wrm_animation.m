function wrm_animation(obj,sptobj,tsdst,SGo,SGi,Dims)
%
%-------function help------------------------------------------------------
% NAME
%   wrm_animation.m
% PURPOSE
%   animation of model spectra timeseries
% USAGE
%   wrm_animation(obj)
% INPUTS
%   obj - instance of WRM_WaveModel class
%   sptobj - instance of SpectralTransfer class
%   tsdst - dstable with selected offshore wave timeseries data
%   SGo - offshore spectra timeseries generated by runSpectra in SpectralTransfer
%   SGi - inshore spectra timeseries generated by runSpectra in SpectralTransfer
%   Dims - struct of the frequencey, f, and directions, xso used in runSpectra.
% OUTPUT
%   animation figure
% SEE ALSO
%   code derived from muiPlots.newAnimation and implemented to show 2
%   subplots in ana animation
% NOTES
%   obj is a data class instance and pobj is a plot class muiPlots instance
%
% Author: Ian Townend
% CoastalSEA (c) Feb 2023
%--------------------------------------------------------------------------
%
    hfig = figure('Name','Animation', 'Units','normalized', ...
                    'Resize','on','HandleVisibility','on','Visible','off',...
                    'Position',[0.38,0.42,0.30,0.42],'Tag','PlotFig');
    %create an instance of muiPlots and populate the properties that are   
    %needed for the newAnimation method
    pobj = muiPlots.get_muiPlots();   %create new instance          
    pobj.Plot.CurrentFig = hfig;
    pobj.Plot.FigNum = hfig.Number;
    pobj.ModelMovie = [];
    pobj.Title = sprintf('Case: %s',tsdst.Description);

    %extract the timeseries data and dimensions for plot
    pobj.Data.X = 1./Dims.f;
    pobj.Data.Y = Dims.xso;
    pobj.Data.Z = {SGo,SGi};
    pobj.Data.T = tsdst.RowNames;    
    pobj.Data.Waves = [tsdst.Hs,tsdst.Tp,tsdst.Dir];

%     %variables to store values that are modified by the function
%     t = pobj.Data.T;  %pobj.Data.T is modified by call to convertTime in new3Dplot
%     var = pobj.Data.Z;%pobj.Data.Z replaced by 3D plot calls

    [s1,s2] = setupAnimation(sptobj,pobj);
    if ~isvalid(pobj.Plot.CurrentFig), return; end

    getAnimation(pobj,s1,s2,hfig);
%     pobj.Data.T = t;     %restore datetime values
%     pobj.Data.Z = var;   %restore Z values
    s1.UserData = pobj.Data;  %store data set in UserData to
                              %allow user to switch between plots
    %add replay and slider
    setControlPanel(obj,pobj,hfig,length(pobj.Data.T),string(pobj.Data.T(1)));
end
    %%
function [s1,s2] = setupAnimation(obj,pobj)
    %initialise 3Dplot and setup animation variables
    hfig = pobj.Plot.CurrentFig;
    figax = gca;   
    var1 = squeeze(pobj.Data.Z{1}(1,:,:)); 
    var2 = squeeze(pobj.Data.Z{2}(1,:,:)); 
    %pobj.Data.Z = {var1,var2};  %first time step
%     pobj.UIset.callTab = '3D';
    hfig.Visible = 'on';
    [s1,s2] = off_in_plot(obj,pobj.Data.X,pobj.Data.Y,var1,var2,figax);
%     pobj.UIset.callTab = '3DT';
    if ~isvalid(hfig), return; end
    %assign axes properties
                
    s1.ZLimMode = 'manual'; %fix limits of z-axis
    s1.ZLim = minmax(pobj.Data.Z{1});   
    s1.NextPlot = 'replaceChildren';
    s1.Tag = 'PlotFigAxes1'; 
    s1surf = findobj(s1.Children,'Tag','PlotFigSurface');
    %if the first surface is a null value (all zeroes) the colorbar does
    %not distribute the colors over the specified range. Adding a single
    %value at the maximum of the range forces this to be correct and the
    %plot is of no value because all 0. This is a trick that seems to work!
    s1surf.ZData(1,1) = s1.ZLim(2);
    %assign data source
    hp1 = s1.Children;
    hp1.ZDataSource = 'var1'; 
    %set limits of colorbar    
    hcb1 = findobj(s1.Parent,'Type','colorbar','Tag','Offshore Spectrum');
    hcb1.LimitsMode = 'manual'; %fix limits of contour bar
    hcb1.Limits = s1.ZLim;

    s2.ZLimMode = 'manual'; %fix limits of z-axis
    s2.ZLim = minmax(pobj.Data.Z{2}); 
    s2.NextPlot = 'replaceChildren';
    s2.Tag = 'PlotFigAxes2'; 
    s2surf = findobj(s2.Children,'Tag','PlotFigSurface');
    %correct for null first surface
    s2surf.ZData(1,1) = s2.ZLim(2);
    %assign data source
    hp2 = s2.Children;
    hp2.ZDataSource = 'var2';  
    %set limits of colorbar    
    hcb2 = findobj(s2.Parent,'Type','colorbar','Tag','Inshore Spectrum');
    hcb2.LimitsMode = 'manual'; %fix limits of contour bar
    hcb2.Limits = s2.ZLim;
    %adjust position of plots and add title
    s1.Position = [0.13,0.58,0.70,0.34]; %make space for slider bar
    s2.Position = [0.13,0.15,0.70,0.34]; %make space for slider bar

    w = pobj.Data.Waves;
    sg = sgtitle(sprintf('%s \nTime = %s, Hs=%.3g; Tp=%.3g; Dir=%.3g\n',pobj.Title,...
                     string(pobj.Data.T(1)),w(1,1),w(1,2),w(1,3)));
    sg.FontSize = 10;
    sg.Margin = 1;
    sg.Tag = 'PlotFigTitle';
end
%%
function getAnimation(pobj,s1,s2,hfig)
    %generate an animation for user selection.
    t = pobj.Data.T;  
    var = pobj.Data.Z;
    nrec = length(t);
    Mframes(nrec) = struct('cdata',[],'colormap',[]);
    Mframes(1) = getframe(gcf); %NB print function allows more control of 
    hp1 = s1.Children;
    hp2 = s2.Children;
    for i=2:nrec
        var1 = squeeze(var{1}(i,:,:)); %#ok<NASGU> 
        refreshdata(hp1,'caller')
        var2 = squeeze(var{2}(i,:,:)); %#ok<NASGU> 
        refreshdata(hp2,'caller')

        w = pobj.Data.Waves;
        sg = findobj(s1.Parent.Children,'Tag','PlotFigTitle');
        sg.String = sprintf('%s \nTime = %s, Hs=%.3g; Tp=%.3g; Dir=%.3g\n',...
                       pobj.Title,string(t(i)),w(i,1),w(i,2),w(i,3));
        drawnow;                 
        Mframes(i) = getframe(gcf); 
        %NB print function allows more control of resolution 
    end
    idm = size(pobj.ModelMovie,1);            
    pobj.ModelMovie{idm+1,1} = hfig.Number;
    pobj.ModelMovie{idm+1,2} = Mframes;   %save movie to class property
end 
%%
    function hm = setControlPanel(obj,pobj,hfig,nrec,t0)
        %intialise button to re-run animation and slider to scroll through
        %add playback button
        buttxt = 'Run';   
        butpos = [0.05,0.01,0.05,0.05];
        butcall = @(src,evt)runMovie(obj,pobj,src,evt);
        buttag = 'runMovie';
        buttip = 'Press to rerun animation';         
        hm(1) = setactionbutton(hfig,buttxt,butpos,butcall,buttag,buttip);
        buttxt = 'Save';   
        butpos = [0.12,0.01,0.05,0.05];
        butcall = @(src,evt)runMovie(obj,pobj,src,evt);
        buttag = 'saveMovie';
        buttip = 'Press to save animation';  
        hm(2) = setactionbutton(hfig,buttxt,butpos,butcall,buttag,buttip);
        %add slide control            
        hm(2) = uicontrol('Parent',hfig,...
                'Style','slider','Value',1,... 
                'Min',1,'Max',nrec,'sliderstep',[1 1]/nrec,...
                'Callback', @(src,evt)runMovie(obj,pobj,src,evt),...
                'HorizontalAlignment', 'center',...
                'Units','normalized', 'Position', [0.2,0.015,0.6,0.04],...
                'Tag','stepMovie');
        hm(3) = uicontrol('Parent',hfig,...
                'Style','text','String',t0,'Units','normalized',... 
                'Position',[0.8,0.015,0.15,0.03],'Tag','FrameTime');
    end
