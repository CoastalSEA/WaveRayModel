function wrm_animation(mobj,sptobj,tsdst,SGo,SGi,Dims)
%
%-------function help------------------------------------------------------
% NAME
%   wrm_animation.m
% PURPOSE
%   animation of model spectra timeseries
% USAGE
%   wrm_animation(obj,sptobj,tsdst,SGo,SGi,Dims)
% INPUTS
%   mobj - instance of WaveRayModel class
%   sptobj - instance of SpectralTransfer class
%   tsdst - dstable with selected offshore wave timeseries data
%   SGo - offshore spectra timeseries generated by runSpectra in SpectralTransfer
%   SGi - inshore spectra timeseries generated by runSpectra in SpectralTransfer
%   Dims - struct of the frequencey, f, and directions, xso used in runSpectra.
% OUTPUT
%   animation figure
% SEE ALSO
%   code derived from muiPlots.newAnimation and implemented to show 2
%   subplots in an animation
% NOTES
%   obj is a data class instance and pobj is a plot class muiPlots instance
%
% Author: Ian Townend
% CoastalSEA (c) Feb 2023
%--------------------------------------------------------------------------
%
    hfig = figure('Name','Animation', 'Units','normalized', ...
                    'Resize','on','HandleVisibility','on','Visible','off',...
                    'Position',[0.38,0.42,0.30,0.42],'Tag','PlotFig');
    %create an instance of muiPlots and populate the properties that are   
    %needed for the newAnimation method
    if isa(mobj.mUI.Plots,'muiPlots')
        pobj = mobj.mUI.Plots;    %get existing instance          
        clearPreviousPlotData(pobj);
    else
        pobj = muiPlots.get_muiPlots();                   %create new instance
    end       
    pobj.Plot.CurrentFig = hfig;
    pobj.Plot.FigNum = hfig.Number;
    pobj.ModelMovie = [];
    pobj.Title = sprintf('Case: %s',tsdst.Description);

    %extract the timeseries data and dimensions for plot
    pobj.Data.X = 1./Dims.freq;
    pobj.Data.Y = Dims.dir;
    pobj.Data.Z = {SGo,SGi};
    pobj.Data.T = tsdst.RowNames;    
    if any(strcmp(tsdst.VariableNames,'Tp'))
        pobj.Data.Waves = [tsdst.Hs,tsdst.Tp,tsdst.Dir];
    else
        Hs = tsdst.Hs;
        [~,idx] = max(tsdst.S,[],2); 
        Tp = 1./tsdst.Dimensions.freq(idx);
        pkDir = tsdst.Dir(idx);
        pobj.Data.Waves = [Hs,Tp,pkDir];
    end

    answer = questdlg('What type of plot','OI spectrum','XY','Polar','XY');
    if strcmp(answer,'XY')
        pobj.MetaData = true;          %Cartesian dir-freq plot
    else
        pobj.MetaData = false;         %Polar dir-freq plot  
    end

    [s1,s2] = setupAnimation(sptobj,pobj);
    if ~isvalid(pobj.Plot.CurrentFig), return; end

    getAnimation(pobj,s1,s2,hfig);
    s1.UserData = pobj.Data;  %store data set in UserData to
                              %allow user to switch between plots
    %add replay and slider
    wrmControlPanel(pobj,hfig,length(pobj.Data.T),string(pobj.Data.T(1)));

    %assign muiPlots instance to handle
    mobj.mUI.Plots = pobj;
end
    %%
function [s1,s2] = setupAnimation(sptobj,pobj)
    %initialise 3Dplot and setup animation variables
    hfig = pobj.Plot.CurrentFig;
    figax = axes(hfig); 
    var1 = squeeze(pobj.Data.Z{1}(1,:,:)); 
    var2 = squeeze(pobj.Data.Z{2}(1,:,:)); 
    hfig.Visible = 'on';
    [s1,s2] = off_in_plot(sptobj,pobj.Data.X,pobj.Data.Y,var1,var2,...
                                                    figax,pobj.MetaData);
    if ~isvalid(hfig), return; end

    %assign axes properties                
    s1.ZLimMode = 'manual'; %fix limits of z-axis
    s1.ZLim = minmax(pobj.Data.Z{1});   
    s1.NextPlot = 'replaceChildren';
    s1.Tag = 'PlotFigAxes1'; 
    s1.CLim = s1.ZLim;
    hp1 = findobj(s1.Children,'Type','surface');
    %assign data source
    hp1.CDataSource = 'var1'; 

    s2.ZLimMode = 'manual'; %fix limits of z-axis
    s2.ZLim = minmax(pobj.Data.Z{2}); 
    s2.NextPlot = 'replaceChildren';
    s2.Tag = 'PlotFigAxes2'; 
    s2.CLim = s2.ZLim;
    hp2 = findobj(s2.Children,'Type','surface');
    %assign data source    
    hp2.CDataSource = 'var2';

    %adjust position of plots and add title
    if pobj.MetaData                         %holds logical for isXY plot
        s1.Position = [0.13,0.58,0.70,0.34]; %make space for slider bar
        s2.Position = [0.13,0.15,0.70,0.34]; %make space for slider bar
    else                                     %polar plot
        hfig.Position(3) = 0.6;
        So = pobj.Data.Z{1}; Si = pobj.Data.Z{2};
        nrec = size(So,1);
        ff = pobj.Data.X; dd = pobj.Data.Y;
        parfor i=1:nrec
            Po(i,:,:) = reshapePolarGrid(ff,dd,squeeze(So(i,:,:)));
            Pi(i,:,:) = reshapePolarGrid(ff,dd,squeeze(Si(i,:,:)));
        end
        pobj.Data.Z = {Po,Pi}; 
    end

    w = pobj.Data.Waves;
    sg = sgtitle(sprintf('%s \nTime = %s, Hs=%.3g; Tp=%.3g; Dir=%.3g\n',pobj.Title,...
                     string(pobj.Data.T(1)),w(1,1),w(1,2),w(1,3)));
    sg.FontSize = 10;
    sg.Margin = 1;
    sg.Tag = 'PlotFigTitle';
end
%%
function getAnimation(pobj,s1,s2,hfig)
    %generate an animation for user selection.
    t = pobj.Data.T;  
    var = pobj.Data.Z;
    w = pobj.Data.Waves;
    nrec = length(t);
    Mframes(nrec) = struct('cdata',[],'colormap',[]);
    Mframes(1) = getframe(gcf); %NB print function allows more control of 
    hp1 = findobj(s1.Children,'Type','surface');
    hp2 = findobj(s2.Children,'Type','surface');
    for i=2:nrec
        var1 = squeeze(var{1}(i,:,:)); %#ok<NASGU> 
        refreshdata(hp1,'caller')
        var2 = squeeze(var{2}(i,:,:)); %#ok<NASGU> 
        refreshdata(hp2,'caller')        
        sg = findobj(s1.Parent.Children,'Tag','PlotFigTitle');
        sg.String = sprintf('%s \nTime = %s, Hs=%.3g; Tp=%.3g; Dir=%.3g\n',...
                       pobj.Title,string(t(i)),w(i,1),w(i,2),w(i,3));
        drawnow;                 
        Mframes(i) = getframe(gcf); 
        %NB print function allows more control of resolution 
    end
    idm = size(pobj.ModelMovie,1);            
    pobj.ModelMovie{idm+1,1} = hfig.Number;
    pobj.ModelMovie{idm+1,2} = Mframes;   %save movie to class property
end 
%%
function hm = wrmControlPanel(pobj,hfig,nrec,t0)
    %intialise button to re-run animation and slider to scroll through
    %add playback button
    buttxt = 'Run';   
    butpos = [0.05,0.01,0.05,0.05];
    butcall = @(src,evt)wrm_runmovie(pobj,src,evt);
    buttag = 'runMovie';
    buttip = 'Press to rerun animation';         
    hm(1) = setactionbutton(hfig,buttxt,butpos,butcall,buttag,buttip);
    buttxt = 'Save';   
    butpos = [0.12,0.01,0.05,0.05];
    butcall = @(src,evt)wrm_runmovie(pobj,src,evt);
    buttag = 'saveMovie';
    buttip = 'Press to save animation';  
    hm(2) = setactionbutton(hfig,buttxt,butpos,butcall,buttag,buttip);
    %add slide control            
    hm(2) = uicontrol('Parent',hfig,...
            'Style','slider','Value',1,... 
            'Min',1,'Max',nrec,'sliderstep',[1 1]/nrec,...
            'Callback', @(src,evt)wrm_runmovie(pobj,src,evt),...
            'HorizontalAlignment', 'center',...
            'Units','normalized', 'Position', [0.2,0.015,0.6,0.04],...
            'Tag','stepMovie');
    hm(3) = uicontrol('Parent',hfig,...
            'Style','text','String',t0,'Units','normalized',... 
            'Position',[0.8,0.015,0.15,0.03],'Tag','FrameTime');
end
%%
function P = reshapePolarGrid(Period,Dir,S)
    %format spectral array to be in format required by polarplot3d
    wid = 'MATLAB:scatteredInterpolant:DupPtsAvValuesWarnId';
    %interpolate var(phi,T) onto plot domain defined by tints,rints
    %intervals match those set to initialise plot in SpectralTransfer.polar_plot
    tints = linspace(0,2*pi,360); 
    rints = linspace(1,25,25);
    [Tq,Rq] = meshgrid(tints,rints); 
    warning('off',wid)
    P = griddata(deg2rad(Dir),Period,S',Tq,Rq);
    P(isnan(P)) = 0;  %fill blank sector so that it plots the period labels
    warning('on',wid)
end
